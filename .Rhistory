hist(hat_w0_grf, main = 'Histogram of random forest base weights')
hist(w_ebal, main = 'Histogram of ebalance base weights')
hist(w_sbw, main = 'Histogram of SBW base weights')
# propensity model
ml.glm = glm(treatment ~ ., data = lalonde[, 1:7], family = 'binomial')
hat_e = predict(ml.glm, newdata = lalonde[, 2:7], type="response")
hat_w_0 = hat_e[lalonde$treatment==0] / (1-hat_e[lalonde$treatment==0]) * (1-mean(lalonde$treatment)) / mean(lalonde$treatment)
hat_w_0 = as.numeric(hat_w_0)
par(mfrow = c(2, 5))
# regression model
ml.lm = lm(re78 ~., data = lalonde[lalonde$treatment==0,c(2:7,10)])
hat_mu = as.numeric(predict(ml.lm, newdata = lalonde[,c(2:7)]))
# run procedure
res_lm = att_two_way(hat_w_0, hat_mu, X0, X1, Y0, Y1, Z)
print(paste0("By def: ", res_lm$att_bydef, ", By weighting: ", res_lm$att_bydec))
plot(res_lm$w1_prop, res_lm$w2_reg,
main = "Weights using logistic propensity model",
xlab = "Weights 1 for propensity", ylab = "Weights 2 for regression")
# replace the propensity model by constant
hat_w0_const = rep(1, n0)
res_const = att_two_way(hat_w0_const, hat_mu, X0, X1, Y0, Y1, Z)
print(paste0("By def: ", res_const$att_bydef, ", By weighting: ", res_const$att_bydec))
plot(res_const$w1_prop, res_const$w2_reg,
main = "Weights using constant propensity model",
xlab = "Weights 1 for propensity", ylab = "Weights 2 for regression")
# replace the propensity model by random forest
ml.grf = regression_forest(X = lalonde[, 2:7], Y = Z)
hat_e_grf = predict(ml.grf, newdata = lalonde[, 2:7])$predictions
hat_w0_grf = hat_e_grf[Z==0] / (1-hat_e_grf[Z==0]) * (1-mean(Z)) / mean(Z)
hat_w0_grf = hat_w0_grf / mean(hat_w0_grf)
res_grf = att_two_way(hat_w0_grf, hat_mu, X0, X1, Y0, Y1, Z)
print(paste0("By def: ", res_grf$att_bydef, ", By weighting: ", res_grf$att_bydec))
plot(res_grf$w1_prop, res_grf$w2_reg,
main = "Weights using random forest propensity model",
xlab = "Weights 1 for propensity", ylab = "Weights 2 for regression")
# replace the propensity model by entropy balancing
ebal.obj = ebalance(Z, lalonde[, 2:7])
w_ebal = ebal.obj$w
res_ebal = att_two_way(w_ebal, hat_mu, X0, X1, Y0, Y1, Z)
print(paste0("By def: ", res_ebal$att_bydef, ", By weighting: ", res_ebal$att_bydec))
plot(res_ebal$w1_prop, res_ebal$w2_reg,
main = "Weights using entropy balancing base weights",
xlab = "Weights 1 for propensity", ylab = "Weights 2 for regression")
# replace the propensity model by SBW
sbw.obj = sbw(lalonde[,1:7], ind = 'treatment',
bal = list(bal_cov=colnames(lalonde)[2:7], bal_tol=0.1, bal_alg=FALSE),
wei = list(wei_pos=TRUE, wei_sum=TRUE),
sol = list(sol_nam = "osqp"), mes = TRUE)
w_sbw = (sbw.obj$dat_weights)$sbw_weights[1:n0]
w_sbw = w_sbw / mean(w_sbw)
res_sbw = att_two_way(w_sbw, hat_mu, X0, X1, Y0, Y1, Z)
print(paste0("By def: ", res_sbw$att_bydef, ", By weighting: ", res_sbw$att_bydec))
plot(res_sbw$w1_prop, res_sbw$w2_reg,
main = "Two sets of weights using SBW base weights",
xlab = "Weights 1 for propensity", ylab = "Weights 2 for regression")
hist(hat_w_0, main = 'Histogram of logistic base weights')
hist(hat_w0_const, main = 'Histogram of constant base weights')
hist(hat_w0_grf, main = 'Histogram of random forest base weights')
hist(w_ebal, main = 'Histogram of ebalance base weights')
hist(w_sbw, main = 'Histogram of SBW base weights')
# checking variance
list_res = list(res_lm, res_const, res_grf, res_ebal, res_sbw)
i=1
tres = list_res[[i]]
var.mat = matrix(0, nrow=5, ncol=3)
for (i in 1:5){
tres = list_res[[i]]
var.mat[i,] = c(var(tres$w_total*Y0), var(tres$w1_prop*Y0), var(tres$w2_reg*Y0)) / var(Y0)
}
var.mat
att_two_way_34 <- function(base_w0, hat_mu, X0, X1, Y0, Y1, Z){
hat_att_bydef = mean(Y1) - mean((Y0 - hat_mu[Z==0]) * base_w0) - mean(hat_mu[Z==1])
matX0 = as.matrix(X0)
n0 = nrow(X0)
w3 = as.numeric(t(matrix(base_w0, ncol=1)) %*%  diag(n0) )
w4 = as.numeric(t(matrix(colMeans(X1), ncol=1)) %*% solve(t(matX0)%*%matX0) %*% t(matX0) * n0)
w4 = w4 - as.numeric(t(matrix(base_w0, ncol=1)) %*% matX0 %*% solve(t(matX0)%*%matX0) %*% t(matX0))
ww = w3 + w4
hat_att_w = mean(Y1) - mean(w3*Y0) - mean(w4*Y0)
return(list("att_bydef" = hat_att_bydef, "att_bydec" = hat_att_bydec,
"w3_prop" = w3, "w4_reg" = w4, "w_total" = ww))
}
res_lm_34 = att_two_way_34(hat_w_0, hat_mu, X0, X1, Y0, Y1, Z)
att_two_way_34 <- function(base_w0, hat_mu, X0, X1, Y0, Y1, Z){
hat_att_bydef = mean(Y1) - mean((Y0 - hat_mu[Z==0]) * base_w0) - mean(hat_mu[Z==1])
matX0 = as.matrix(X0)
n0 = nrow(X0)
w3 = as.numeric(t(matrix(base_w0, ncol=1)) %*%  diag(n0) )
w4 = as.numeric(t(matrix(colMeans(X1), ncol=1)) %*% solve(t(matX0)%*%matX0) %*% t(matX0) * n0)
w4 = w4 - as.numeric(t(matrix(base_w0, ncol=1)) %*% matX0 %*% solve(t(matX0)%*%matX0) %*% t(matX0))
ww = w3 + w4
hat_att_bydec = mean(Y1) - mean(w3*Y0) - mean(w4*Y0)
return(list("att_bydef" = hat_att_bydef, "att_bydec" = hat_att_bydec,
"w3_prop" = w3, "w4_reg" = w4, "w_total" = ww))
}
res_lm_34 = att_two_way_34(hat_w_0, hat_mu, X0, X1, Y0, Y1, Z)
print(paste0("By def: ", res_lm_34$att_bydef, ", By weighting: ", res_lm_34$att_bydec))
par(mfrow = c(2, 5))
res_lm_34 = att_two_way_34(hat_w_0, hat_mu, X0, X1, Y0, Y1, Z)
print(paste0("By def: ", res_lm_34$att_bydef, ", By weighting: ", res_lm_34$att_bydec))
plot(res_lm_34$w3_prop, res_lm_34$w4_reg,
main = "Weights using logistic propensity model",
xlab = "Weights 3 for propensity", ylab = "Weights 4 for regression")
res_const_34 = att_two_way_34(hat_w0_const, hat_mu, X0, X1, Y0, Y1, Z)
print(paste0("By def: ", res_const_34$att_bydef, ", By weighting: ", res_const_34$att_bydec))
plot(res_const_34$w3_prop, res_const_34$w4_reg,
main = "Weights using constant propensity model",
xlab = "Weights 3 for propensity", ylab = "Weights 4 for regression")
res_grf_34 = att_two_way_34(hat_w0_grf, hat_mu, X0, X1, Y0, Y1, Z)
print(paste0("By def: ", res_grf_34$att_bydef, ", By weighting: ", res_grf_34$att_bydec))
plot(res_grf_34$w3_prop, res_grf_34$w4_reg,
main = "Weights using random forest propensity model",
xlab = "Weights 3 for propensity", ylab = "Weights 4 for regression")
res_ebal_34 = att_two_way_34(w_ebal, hat_mu, X0, X1, Y0, Y1, Z)
print(paste0("By def: ", res_ebal_34$att_bydef, ", By weighting: ", res_ebal_34$att_bydec))
plot(res_ebal_34$w3_prop, res_ebal_34$w4_reg,
main = "Weights using entropy balancing base weights",
xlab = "Weights 3 for propensity", ylab = "Weights 4 for regression")
res_sbw_34 = att_two_way_34(w_sbw, hat_mu, X0, X1, Y0, Y1, Z)
print(paste0("By def: ", res_sbw_34$att_bydef, ", By weighting: ", res_sbw_34$att_bydec))
plot(res_sbw_34$w3_prop, res_sbw_34$w4_reg,
main = "Two sets of weights using SBW base weights",
xlab = "Weights 3 for propensity", ylab = "Weights 4 for regression")
hist(hat_w_0, main = 'Histogram of logistic base weights')
hist(hat_w0_const, main = 'Histogram of constant base weights')
hist(hat_w0_grf, main = 'Histogram of random forest base weights')
hist(w_ebal, main = 'Histogram of ebalance base weights')
hist(w_sbw, main = 'Histogram of SBW base weights')
# checking variance
list_res = list(res_lm, res_const, res_grf, res_ebal, res_sbw)
list_res_34 = list(res_lm_34, res_const_34, res_grf_34, res_ebal_34, res_sbw_34)
var.mat = matrix(0, nrow=5, ncol=5)
for (i in 1:5){
tres = list_res[[i]]
tres_34 = list_res_34[[i]]
var.mat[i,] = c(var(tres$w_total*Y0), var(tres$w1_prop*Y0), var(tres$w2_reg*Y0),
var(tres_34$w3_prop*Y0), var(tres_34$w4_reg*Y0)) / var(Y0)
}
var.mat
setwd("/Users/ying/Desktop/Research/collaborations/cf_drug_discovery/workflow/plot_workflow")
HEAD_LIST = c('cyp2c9_substrate_carbonmangels',
'dili',
'cyp2d6_substrate_carbonmangels',
'bbb_martins',
'cyp2d6_veith',
'bioavailability_ma',
'cyp2c9_veith',
'cyp3a4_substrate_carbonmangels',
'herg',
'ames',
'pgp_broccatelli',
'hia_hou',
'cyp3a4_veith')
# lower-bounded true positive
tp.res = data.frame()
for (loss in c("bce_loss", "bnn_loss")){
for (suffix in c("", "_des")){
for (id in 1:13){
head = paste("/Users/ying/Desktop/Stanford/Research/Candes/cf_drug_discovery/results/admet",
suffix , "/classification/", loss, "/Morgan/others/", sep = '')
for (seed in 1:100){
path = paste(head, HEAD_LIST[id], "_TP_seed_", seed, ".csv", sep = '')
if (file.exists(path)){
t.res = read.csv(path)
t.res$data = HEAD_LIST[id]
t.res$loss = loss
t.res$des = 1 * (suffix == "_des")
tp.res = rbind(tp.res, t.res)
}
}
}
}
}
tp.res$desname = sapply(tp.res$des, function(x) c("selection", "de-selection")[x+1])
tp.res %>% filter(des == 1) %>%
ggplot(aes(x = K, y = true_TP, group = K)) + theme_bw() +
geom_boxplot() +
geom_abline(intercept=0, slope=1, col='red', linetype='dashed') +
facet_wrap(vars(data) ) +
xlab("Target number of true positives") + ylab("Discovered true positives")
# lower-bounded true positive
tp.res = data.frame()
for (loss in c("bce_loss", "bnn_loss")){
for (suffix in c("", "_des")){
for (id in 1:13){
head = paste("/Users/ying/Desktop/Research/collaborations/cf_drug_discovery/results/admet",
suffix , "/classification/", loss, "/Morgan/others/", sep = '')
for (seed in 1:100){
path = paste(head, HEAD_LIST[id], "_TP_seed_", seed, ".csv", sep = '')
if (file.exists(path)){
t.res = read.csv(path)
t.res$data = HEAD_LIST[id]
t.res$loss = loss
t.res$des = 1 * (suffix == "_des")
tp.res = rbind(tp.res, t.res)
}
}
}
}
}
tp.res$desname = sapply(tp.res$des, function(x) c("selection", "de-selection")[x+1])
tp.res %>% filter(des == 1) %>%
ggplot(aes(x = K, y = true_TP, group = K)) + theme_bw() +
geom_boxplot() +
geom_abline(intercept=0, slope=1, col='red', linetype='dashed') +
facet_wrap(vars(data) ) +
xlab("Target number of true positives") + ylab("Discovered true positives")
tp.res %>% filter(des==0, data == 'cyp2d6_veith', loss == 'bnn_loss') %>%
ggplot(aes(x = K, y = true_TP, group = K)) + theme_bw() +
geom_boxplot() +
geom_abline(intercept=0, slope=1, col='red', linetype='dashed') +
xlab("Target number of true positives") + ylab("Discovered true positives")
tp.res %>% filter(des==1, data == 'cyp2d6_veith', loss == 'bnn_loss') %>%
ggplot(aes(x = K, y = true_TP, group = K)) + theme_bw() +
geom_boxplot() +
geom_abline(intercept=0, slope=1, col='red', linetype='dashed') +
xlab("Target number of true positives") + ylab("Discovered true positives")
tp.res %>% filter(des==1, data == 'cyp2d6_veith', seed==2) %>%
ggplot(aes(x = K, y = nsel)) + theme_bw() +
# geom_boxplot() +
geom_line() +
geom_point(x=35, y = 51, col = 'red', size=2) +
xlab("Target number of true positives") + ylab("Number of selection")
fp.res %>% filter(des==1, data=='cyp2d6_veith', loss == 'bnn_loss') %>%
ggplot(aes(x = K, y = true_FP, group = K)) + theme_bw() +
geom_boxplot() +
geom_abline(intercept=0, slope=1, col='red', linetype='dashed') +
xlab("Target number of false positives") + ylab("Realized false positives")
tp.res %>% filter(des==1, data == 'cyp2d6_veith', loss == 'bnn_loss') %>%
ggplot(aes(x = K, y = true_TP, group = K)) + theme_bw() +
geom_boxplot() +
geom_abline(intercept=0, slope=1, col='red', linetype='dashed') +
xlab("Target number of true positives") + ylab("Discovered true positives")
fp.res = data.frame()
for (loss in c("bce_loss", "bnn_loss")){
for (suffix in c("", "_des")){
for (id in 1:13){
head = paste("/Users/ying/Desktop/Stanford/Research/Candes/cf_drug_discovery/results/admet",
suffix , "/classification/", loss, "/Morgan/others/", sep = '')
for (seed in 1:100){
path = paste(head, HEAD_LIST[id], "_FP_seed_", seed, ".csv", sep = '')
if (file.exists(path)){
t.res = read.csv(path)
t.res$data = HEAD_LIST[id]
t.res$loss = loss
t.res$des = 1 * (suffix == "_des")
fp.res = rbind(fp.res, t.res)
}
}
}
}
}
fp.res = data.frame()
for (loss in c("bce_loss", "bnn_loss")){
for (suffix in c("", "_des")){
for (id in 1:13){
head = paste("/Users/ying/Desktop/Research/collaborations/cf_drug_discovery/results/admet",
suffix , "/classification/", loss, "/Morgan/others/", sep = '')
for (seed in 1:100){
path = paste(head, HEAD_LIST[id], "_FP_seed_", seed, ".csv", sep = '')
if (file.exists(path)){
t.res = read.csv(path)
t.res$data = HEAD_LIST[id]
t.res$loss = loss
t.res$des = 1 * (suffix == "_des")
fp.res = rbind(fp.res, t.res)
}
}
}
}
}
fp.res$desname = sapply(fp.res$des, function(x) c("selection", "de-selection")[x+1])
fp.res %>% filter(des==0) %>%
ggplot(aes(x = K, y = true_FP, group = K)) + theme_bw() +
geom_boxplot() +
geom_abline(intercept=0, slope=1, col='red', linetype='dashed') +
facet_wrap(vars(data) ) +
xlab("Target number of false positives") + ylab("Realized false positives")
fp.res %>% filter(des==1) %>%
ggplot(aes(x = K, y = true_FP, group = K)) + theme_bw() +
geom_boxplot() +
geom_abline(intercept=0, slope=1, col='red', linetype='dashed') +
facet_wrap(vars(data) ) +
xlab("Target number of false positives") + ylab("Realized false positives")
fp.res %>% filter(des==1, data=='cyp2d6_veith', loss == 'bnn_loss') %>%
ggplot(aes(x = K, y = true_FP, group = K)) + theme_bw() +
geom_boxplot() +
geom_abline(intercept=0, slope=1, col='red', linetype='dashed') +
xlab("Target number of false positives") + ylab("Realized false positives")
fp.res %>% filter(des==1, data=='cyp2d6_veith', loss == 'bce_loss') %>%
ggplot(aes(x = K, y = true_FP, group = K)) + theme_bw() +
geom_boxplot() +
geom_abline(intercept=0, slope=1, col='red', linetype='dashed') +
xlab("Target number of false positives") + ylab("Realized false positives")
fp.res %>% filter(des==1, loss=='bce_loss') %>%
ggplot(aes(x = K, y = true_FP, group = K)) + theme_bw() +
geom_boxplot() +
geom_abline(intercept=0, slope=1, col='red', linetype='dashed') +
facet_wrap(vars(data) ) +
xlab("Target number of false positives") + ylab("Realized false positives")
fp.res %>% filter(des==1, data=='cyp2d6_veith', loss == 'bce_loss') %>%
ggplot(aes(x = K, y = true_FP, group = K)) + theme_bw() +
geom_boxplot() +
geom_abline(intercept=0, slope=1, col='red', linetype='dashed') +
xlab("Target number of false positives") + ylab("Realized false positives")
fp.res %>% filter(des==1, data == 'cyp2d6_veith', seed==2) %>%
ggplot(aes(x = K, y = nsel, group = seed)) + theme_bw() +
# geom_boxplot() +
geom_line() +
geom_point(x=20, y = 56, col = 'red', size=2) +
xlab("Target number of false positives") + ylab("Number of selection")
fp.res %>% filter(des==1, data == 'cyp2d6_veith',)
fp.res %>% filter(des==1, data == 'cyp2d6_veith', seed==1) %>%
ggplot(aes(x = K, y = nsel, group = seed)) + theme_bw() +
# geom_boxplot() +
geom_line() +
geom_point(x=20, y = 56, col = 'red', size=2) +
xlab("Target number of false positives") + ylab("Number of selection")
fp.res %>% filter(des==1, data == 'cyp2d6_veith', loss == 'bce_loss', seed==1) %>%
ggplot(aes(x = K, y = nsel, group = seed)) + theme_bw() +
# geom_boxplot() +
geom_line() +
geom_point(x=20, y = 56, col = 'red', size=2) +
xlab("Target number of false positives") + ylab("Number of selection")
# estimate FDP
est.res = data.frame()
for (loss in c("bce_loss", "bnn_loss")){
for (suffix in c("", "_des")){
for (id in 1:13){
head = paste("/Users/ying/Desktop/Stanford/Research/Candes/cf_drug_discovery/results/admet",
suffix , "/classification/", loss, "/Morgan/others/", sep = '')
for (seed in 1:100){
path = paste(head, HEAD_LIST[id], "_estFP_seed_", seed, ".csv", sep = '')
if (file.exists(path)){
t.res = read.csv(path)
t.res$data = HEAD_LIST[id]
t.res$loss = loss
t.res$des = 1 * (suffix == "_des")
est.res = rbind(est.res, t.res)
}
}
}
}
}
# estimate FDP
est.res = data.frame()
for (loss in c("bce_loss", "bnn_loss")){
for (suffix in c("", "_des")){
for (id in 1:13){
head = paste("/Users/ying/Desktop/Research/collaborations/cf_drug_discovery/results/admet",
suffix , "/classification/", loss, "/Morgan/others/", sep = '')
for (seed in 1:100){
path = paste(head, HEAD_LIST[id], "_estFP_seed_", seed, ".csv", sep = '')
if (file.exists(path)){
t.res = read.csv(path)
t.res$data = HEAD_LIST[id]
t.res$loss = loss
t.res$des = 1 * (suffix == "_des")
est.res = rbind(est.res, t.res)
}
}
}
}
}
# est.res$Kfac = factor(est.res$K)
est.res$desname = sapply(est.res$des, function(x) c("selection", "de-selection")[x+1])
est.res %>% ggplot(aes(x = true_FP, y = weight_est, group = K)) + theme_bw() +
geom_point(aes(col = K), alpha = 0.1) +
geom_abline(intercept=0, slope=1, col='red', linetype='dashed') +
facet_wrap(vars(data) ) +
xlab("Target number of false positives") + ylab("Realized false positives")
est.res %>% filter(des==1, data=='cyp2d6_veith',  loss=='bnn_loss') %>%
ggplot(aes(x = true_FP , y = naive_est , group = K)) + theme_bw() +
geom_point(aes(col = K), alpha = 0.1) +
labs(col = "top-K") +
geom_abline(intercept=0, slope=1, col='red', linetype='dashed') +
xlab("True false positives") + ylab("Estimated false positives")
est.res %>% filter(des==1, data=='cyp2c9_veith',  loss=='bnn_loss') %>%
ggplot(aes(x = true_FP , y = naive_est , group = K)) + theme_bw() +
geom_point(aes(col = K), alpha = 0.1) +
labs(col = "top-K") +
geom_abline(intercept=0, slope=1, col='red', linetype='dashed') +
xlab("True false positives") + ylab("Estimated false positives")
est.res %>% filter(des==1, data=='cyp2c9_veith',  loss=='bce_loss') %>%
ggplot(aes(x = true_FP , y = naive_est , group = K)) + theme_bw() +
geom_point(aes(col = K), alpha = 0.1) +
labs(col = "top-K") +
geom_abline(intercept=0, slope=1, col='red', linetype='dashed') +
xlab("True false positives") + ylab("Estimated false positives")
head(fp.res)
tp.res %>% filter(des == 1, loss =='bce_loss') %>%
ggplot(aes(x = K, y = true_TP, group = K)) + theme_bw() +
geom_boxplot() +
geom_abline(intercept=0, slope=1, col='red', linetype='dashed') +
facet_wrap(vars(data) ) +
xlab("Target number of true positives") + ylab("Discovered true positives")
tp.res %>% filter(des==1, data == 'cyp2c9_veith', loss == 'bce_loss') %>%
ggplot(aes(x = K, y = true_TP, group = K)) + theme_bw() +
geom_boxplot() +
geom_abline(intercept=0, slope=1, col='red', linetype='dashed') +
xlab("Target number of true positives") + ylab("Discovered true positives")
ggsave("../../plots/summary/other/admet_des_cyp2c9_veith_TP.pdf", single.plt, width=3, height=2.5, unit='in')
single.plt = tp.res %>% filter(des==1, data == 'cyp2c9_veith', loss == 'bce_loss') %>%
ggplot(aes(x = K, y = true_TP, group = K)) + theme_bw() +
geom_boxplot() +
geom_abline(intercept=0, slope=1, col='red', linetype='dashed') +
xlab("Target number of true positives") + ylab("Discovered true positives")
ggsave("../../plots/summary/other/admet_des_cyp2c9_veith_TP.pdf", single.plt, width=3, height=2.5, unit='in')
ggsave("../../plots/summary/other/admet_des_cyp2c9_veith_TP_nsel_single.pdf", single.plt, width=3, height=2.5, unit='in')
single.plt = tp.res %>% filter(des==1, data == 'cyp2c9_veith', seed==2) %>%
ggplot(aes(x = K, y = nsel)) + theme_bw() +
# geom_boxplot() +
geom_line() +
geom_point(x=35, y = 51, col = 'red', size=2) +
xlab("Target number of true positives") + ylab("Number of selection")
ggsave("../../plots/summary/other/admet_des_cyp2c9_veith_TP_nsel_single.pdf", single.plt, width=3, height=2.5, unit='in')
single.plt = tp.res %>% filter(des==1, data == 'cyp2c9_veith', seed==2, loss == 'bce_loss') %>%
ggplot(aes(x = K, y = nsel)) + theme_bw() +
# geom_boxplot() +
geom_line() +
geom_point(x=35, y = 51, col = 'red', size=2) +
xlab("Target number of true positives") + ylab("Number of selection")
ggsave("../../plots/summary/other/admet_des_cyp2c9_veith_TP_nsel_single.pdf", single.plt, width=3, height=2.5, unit='in')
tp.res %>% filter(des==1, data == 'cyp2c9_veith', seed==2, loss == 'bce_loss')
tp.res %>% filter(des==1, data == 'cyp2c9_veith', seed==1, loss == 'bce_loss')
tp.res %>% filter(des==1, data == 'cyp2c9_veith', seed==3, loss == 'bce_loss')
tp.res %>% filter(des==1, data == 'cyp2c9_veith', seed==4, loss == 'bce_loss')
tp.res %>% filter(des==1, data == 'cyp2c9_veith', seed==5, loss == 'bce_loss')
tp.res %>% filter(des==1, data == 'cyp2c9_veith', seed==6, loss == 'bce_loss')
single.plt = tp.res %>% filter(des==1, data == 'cyp2c9_veith', seed==6, loss == 'bce_loss') %>%
ggplot(aes(x = K, y = nsel)) + theme_bw() +
# geom_boxplot() +
geom_line() +
geom_point(x=35, y = 38, col = 'red', size=2) +
xlab("Target number of true positives") + ylab("Number of selection")
ggsave("../../plots/summary/other/admet_des_cyp2c9_veith_TP_nsel_single.pdf", single.plt, width=3, height=2.5, unit='in')
single.plt = tp.res %>% filter(des==1, data == 'cyp2c9_veith', seed==1, loss == 'bce_loss') %>%
ggplot(aes(x = K, y = nsel)) + theme_bw() +
# geom_boxplot() +
geom_line() +
geom_point(x=35, y = 37, col = 'red', size=2) +
xlab("Target number of true positives") + ylab("Number of selection")
ggsave("../../plots/summary/other/admet_des_cyp2c9_veith_TP_nsel_single.pdf", single.plt, width=3, height=2.5, unit='in')
fp.res %>% filter(des==1, loss=='bce_loss') %>%
ggplot(aes(x = K, y = true_FP, group = K)) + theme_bw() +
geom_boxplot() +
geom_abline(intercept=0, slope=1, col='red', linetype='dashed') +
facet_wrap(vars(data) ) +
xlab("Target number of false positives") + ylab("Realized false positives")
# estimate FDP
est.res = data.frame()
for (loss in c("bce_loss", "bnn_loss")){
for (suffix in c("", "_des")){
for (id in 1:13){
head = paste("/Users/ying/Desktop/Research/collaborations/cf_drug_discovery/results/admet",
suffix , "/classification/", loss, "/Morgan/others/", sep = '')
for (seed in 1:100){
path = paste(head, HEAD_LIST[id], "_estFP_seed_", seed, ".csv", sep = '')
if (file.exists(path)){
t.res = read.csv(path)
t.res$data = HEAD_LIST[id]
t.res$loss = loss
t.res$des = 1 * (suffix == "_des")
est.res = rbind(est.res, t.res)
}
}
}
}
}
# est.res$Kfac = factor(est.res$K)
est.res$desname = sapply(est.res$des, function(x) c("selection", "de-selection")[x+1])
est.res %>% ggplot(aes(x = true_FP, y = weight_est, group = K)) + theme_bw() +
geom_point(aes(col = K), alpha = 0.1) +
geom_abline(intercept=0, slope=1, col='red', linetype='dashed') +
facet_wrap(vars(data) ) +
xlab("Target number of false positives") + ylab("Realized false positives")
est.res %>% filter(des==1, loss=='bce_loss') %>%
ggplot(aes(x = true_FP, y = weight_est, group = K)) + theme_bw() +
geom_point(aes(col = K), alpha = 0.1) +
geom_abline(intercept=0, slope=1, col='red', linetype='dashed') +
facet_wrap(vars(data) ) +
xlab("Target number of false positives") + ylab("Realized false positives")
est.res
source(paste0(ROOT_DIR, "summary/summary_const_calib.R"))
setwd("/Users/ying/Desktop/Research/Dominik/predictive-shift")
library(haven)
library(ebal)
library(tidyverse)
library(grf)
library(car)
library(rmarkdown)
library(rlang)
library(formattable)
library(paletteer)
library(ggplot2)
library(ggpubr)
library(scales)
library(ggsci)
cbPalette <- c(   "#B0B0B0", paletteer_c("viridis::viridis", n=3)[2], "#895C96")
const.palette = c("#B0B0B0", paletteer_c("viridis::viridis", n=3)[1],
"#C52A20", paletteer_c("viridis::viridis", n=3)[3])
study.palette = const.palette
alpha = 0.05
ROOT_DIR = "/Users/ying/Desktop/Research/Dominik/predictive-shift/"
## ===================================== ##
## read utils and merge analysis results ##
## ===================================== ##
source(paste0(ROOT_DIR, "analysis_utils.R"))
source(paste0(ROOT_DIR, "summary/read_merge_data.R"))
detach(sbw)
detach(package::sbw)
detach("package::sbw")
